const { execSync } = require('child_process');
const fs = require('fs');

//function to create multiple files
async function setupBackend() {
        
    //pass an array to create files
    const filesToCreate = ['./index.js', './app.js', './.env','./.gitignore'];
    try {
        await Promise.all(filesToCreate.map(async (file) => await fs.promises.writeFile(file, '')));
        console.log('index,app,env and git ignore file created!');
      } catch (error) {
        console.error('Error creating files:', error.message);
      }
 

    //write basic express boiler plate in one file
    const data = `
    const express = require('express')
    const app = express() 
        
    app.get('/', (req, res) => {
    res.send('Hello World!')
    })
        
    app.listen(3000, () => {
        console.log("server is running")
    })`
    const path = "./index.js"
    fs.writeFileSync(path, data, { flag: 'a+' });   //'a+' is append mode
    console.log("Basic boilerplate of express written in index file successfully");

    //gitignore file for node js
    const data_gitIgnore = `# Logs
    logs
    *.log
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    lerna-debug.log*
    .pnpm-debug.log*
    
    # Diagnostic reports (https://nodejs.org/api/report.html)
    report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
    
    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock
    
    # Directory for instrumented libs generated by jscoverage/JSCover
    lib-cov
    
    # Coverage directory used by tools like istanbul
    coverage
    *.lcov
    
    # nyc test coverage
    .nyc_output
    
    # Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
    .grunt
    
    # Bower dependency directory (https://bower.io/)
    bower_components
    
    # node-waf configuration
    .lock-wscript
    
    # Compiled binary addons (https://nodejs.org/api/addons.html)
    build/Release
    
    # Dependency directories
    node_modules/
    jspm_packages/
    
    # Snowpack dependency directory (https://snowpack.dev/)
    web_modules/
    
    # TypeScript cache
    *.tsbuildinfo
    
    # Optional npm cache directory
    .npm
    
    # Optional eslint cache
    .eslintcache
    
    # Microbundle cache
    .rpt2_cache/
    .rts2_cache_cjs/
    .rts2_cache_es/
    .rts2_cache_umd/
    
    # Optional REPL history
    .node_repl_history
    
    # Output of 'npm pack'
    *.tgz
    
    # Yarn Integrity file
    .yarn-integrity
    
    # dotenv environment variables file
    .env
    .env.test
    .env.production
    
    # parcel-bundler cache (https://parceljs.org/)
    .cache
    .parcel-cache
    
    # Next.js build output
    .next
    out
    
    # Nuxt.js build / generate output
    .nuxt
    dist
    
    # Gatsby files
    .cache/
    # Comment in the public line in if your project uses Gatsby and not Next.js
    # https://nextjs.org/blog/next-9-1#public-directory-support
    # public
    
    # vuepress build output
    .vuepress/dist
    
    # Serverless directories
    .serverless/
    
    # FuseBox cache
    .fusebox/
    
    # DynamoDB Local files
    .dynamodb/
    
    # TernJS port file
    .tern-port
    
    # Stores VSCode versions used for testing VSCode extensions
    .vscode-test
    
    # yarn v2
    .yarn/cache
    .yarn/unplugged
    .yarn/build-state.yml
    .yarn/install-state.gz
    .pnp.*`
    const path_gitIgnore = "./.gitignore"
    fs.writeFileSync(path_gitIgnore, data_gitIgnore, { flag: 'a+' });   //'a+' is append mode
    console.log("gitignore file written successfully");

    //creating all required folders
    execSync('mkdir routes middlewares models db utils controllers', (error) => {
        if (error) {
        console.error(`Error: ${error.message}`);
        return;
        }
    });
    console.log(`folders created`);;
   

    //Now installing all the packages
    console.log(`please wait all packages are installing...`);
    execSync('npm i express prettier mongoose nodemon cors dotenv jsonwebtoken bcrypt cookie-parser multer cloudinary', (error) => {
      if (error) {
        console.error(`Error: ${error.message}`);
        return;
      }
    });
    console.log(`Packages installed : express,nodemon,prettier,mongoose,cors,dotenv,jsonwebtoken,bcrypt,cookie-parser,multer,cloudinary`);
  
 
    //deleting the setup file
    fs.unlink('setup.js', (err) => {
        if (err) {
        console.error('Error deleting the file:', err);
        return;
        } 
    });
    console.log("setup file deleted")
}

module.exports = { setupBackend } 
